/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.9.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'groovy'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    testFunctional {
        groovy {
            srcDir  'src/testFunctional/groovy'
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

configurations {
    testFunctionalImplementation.extendsFrom implementation
    testFunctionalRuntimeOnly.extendsFrom runtimeOnly
}

task testFunctional(type: Test) {
    description = 'Runs functional tests.'
    group = 'verification'

    testClassesDirs = sourceSets.testFunctional.output.classesDirs
    classpath = sourceSets.testFunctional.runtimeClasspath
}

check.dependsOn testFunctional

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // testFunctional

    // mandatory dependencies for using Spock
    implementation "org.codehaus.groovy:groovy:3.0.8"
    testFunctionalImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
    testFunctionalImplementation "org.spockframework:spock-core"
    testFunctionalImplementation "org.spockframework:spock-junit4"  // you can remove this if your code does not rely on old JUnit 4 rules

    // optional dependencies for using Spock
    testFunctionalImplementation "org.hamcrest:hamcrest-core:2.2"   // only necessary if Hamcrest matchers are used
    testFunctionalRuntimeOnly "net.bytebuddy:byte-buddy:1.11.0" // allows mocking of classes (in addition to interfaces)
    testFunctionalRuntimeOnly "org.objenesis:objenesis:3.2"      // allows mocking of classes without default constructor (together with ByteBuddy or CGLIB)
}

application {
    // Define the main class for the application.
    mainClass = 'server.App'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
